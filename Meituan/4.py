# 想象一个金字塔形的正四面体，其有四个顶点和六条棱（边）。如果我们把它看成一张图，可以像这样描述：
# 四个顶点分别为S,A,B,C
# 六条边分别为(S,A)(S,B)(S,C)(A,B)(A,C)(B,C)
# 简单来说，是一张四个点的完全图。
# 现在，有一个很简单的问题等你来解答：你从S点开始，沿着边走K次，回到S点的不同走法有多少种？
#（默认每步只能走一条边，同一条边可以走无限次）


# F(n) = 3 * f(n-1)
# f(n) = F(n-1) + 2 * f(n-1)
# f(n) = 2 * f(n-1) + 3 * f(n-2)
# F(n) = 3 * ( 2 * f(n-2) + 3 * f(n-3) )
import sys

k = int(input().strip())

if k <= 1: sys.stdout.write('0\n')
elif k == 2: sys.stdout.write('3\n')
elif k == 3: sys.stdout.write('6\n')
elif k == 4: sys.stdout.write('21\n')
else:
    mem = {1: 1, 2: 2, 3: 7, 4: 20, 5: 61, 6: 182, 7: 547, 8: 1640, 9: 4921, 10: 14762, 11: 44287, 12: 132860, 13: 398581, 14: 1195742, 15: 3587227, 16: 10761680, 17: 32285041, 18: 96855122, 19: 290565367, 20: 871696100, 21: 2615088301, 22: 7845264902, 23: 23535794707, 24: 70607384120, 25: 211822152361, 26: 635466457082, 27: 1906399371247, 28: 5719198113740, 29: 17157594341221, 30: 51472783023662, 31: 154418349070987, 32: 463255047212960, 33: 1389765141638881, 34: 4169295424916642, 35: 12507886274749927, 36: 37523658824249780, 37: 112570976472749341, 38: 337712929418248022, 39: 1013138788254744067, 40: 3039416364764232200, 41: 9118249094292696601, 42: 27354747282878089802, 43: 82064241848634269407, 44: 246192725545902808220, 45: 738578176637708424661, 46: 2215734529913125273982, 47: 6647203589739375821947, 48: 19941610769218127465840, 49: 59824832307654382397521}
    def f(n):
        if n in mem: return mem[n]
        else: return 2 * f(n-1) + 3 * f(n-2)
    res = 3 * ( 2 * f(k-2) + 3 * f(k-3) ) % 1000000007
    sys.stdout.write(str(res) + '\n')